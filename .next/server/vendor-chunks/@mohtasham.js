"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mohtasham";
exports.ids = ["vendor-chunks/@mohtasham"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mohtasham/md-to-docx/dist/helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/@mohtasham/md-to-docx/dist/helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectTables: () => (/* binding */ collectTables),\n/* harmony export */   computeImageDimensions: () => (/* binding */ computeImageDimensions),\n/* harmony export */   createLinkParagraph: () => (/* binding */ createLinkParagraph),\n/* harmony export */   processBlockquote: () => (/* binding */ processBlockquote),\n/* harmony export */   processCodeBlock: () => (/* binding */ processCodeBlock),\n/* harmony export */   processComment: () => (/* binding */ processComment),\n/* harmony export */   processFormattedText: () => (/* binding */ processFormattedText),\n/* harmony export */   processHeading: () => (/* binding */ processHeading),\n/* harmony export */   processImage: () => (/* binding */ processImage),\n/* harmony export */   processInlineCode: () => (/* binding */ processInlineCode),\n/* harmony export */   processLink: () => (/* binding */ processLink),\n/* harmony export */   processLinkParagraph: () => (/* binding */ processLinkParagraph),\n/* harmony export */   processListItem: () => (/* binding */ processListItem),\n/* harmony export */   processParagraph: () => (/* binding */ processParagraph),\n/* harmony export */   processTable: () => (/* binding */ processTable)\n/* harmony export */ });\n/* harmony import */ var docx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! docx */ \"(ssr)/./node_modules/docx/dist/index.mjs\");\n\n// Helper function to sanitize text for use in bookmark IDs\nfunction sanitizeForBookmarkId(text) {\n    // Remove non-alphanumeric characters (except underscores), replace spaces with underscores\n    // Ensure it starts with a letter or underscore\n    let sanitized = text.replace(/[^a-zA-Z0-9_\\s]/g, \"\").replace(/\\s+/g, \"_\");\n    if (!/^[a-zA-Z_]/.test(sanitized)) {\n        sanitized = \"_\" + sanitized;\n    }\n    // Truncate if necessary (Word has limits, though usually generous)\n    return sanitized.substring(0, 40);\n}\n/**\n * Processes a heading line and returns appropriate paragraph formatting and a bookmark ID\n * @param line - The heading line to process\n * @param config - The heading configuration\n * @param style - The style configuration\n * @param documentType - The document type\n * @returns An object containing the processed paragraph and its bookmark ID\n */\nfunction processHeading(line, config, style, documentType) {\n    const headingText = line.replace(new RegExp(`^#{${config.level}} `), \"\");\n    const headingLevel = config.level;\n    // Generate a unique bookmark ID using the clean text (without markdown)\n    const cleanTextForBookmark = headingText\n        .replace(/\\*\\*/g, \"\")\n        .replace(/\\*/g, \"\");\n    const bookmarkId = `_Toc_${sanitizeForBookmarkId(cleanTextForBookmark)}_${Date.now()}`;\n    // Get the appropriate font size based on heading level and custom style\n    let headingSize = style.titleSize;\n    // Use specific heading size if provided, otherwise calculate based on level\n    if (headingLevel === 1 && style.heading1Size) {\n        headingSize = style.heading1Size;\n    }\n    else if (headingLevel === 2 && style.heading2Size) {\n        headingSize = style.heading2Size;\n    }\n    else if (headingLevel === 3 && style.heading3Size) {\n        headingSize = style.heading3Size;\n    }\n    else if (headingLevel === 4 && style.heading4Size) {\n        headingSize = style.heading4Size;\n    }\n    else if (headingLevel === 5 && style.heading5Size) {\n        headingSize = style.heading5Size;\n    }\n    else if (headingLevel > 1) {\n        // Fallback calculation if specific size not provided\n        headingSize = style.titleSize - (headingLevel - 1) * 4;\n    }\n    // Determine alignment based on heading level\n    let alignment;\n    // Check for level-specific alignment first\n    if (headingLevel === 1 && style.heading1Alignment) {\n        alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType[style.heading1Alignment];\n    }\n    else if (headingLevel === 2 && style.heading2Alignment) {\n        alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType[style.heading2Alignment];\n    }\n    else if (headingLevel === 3 && style.heading3Alignment) {\n        alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType[style.heading3Alignment];\n    }\n    else if (headingLevel === 4 && style.heading4Alignment) {\n        alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType[style.heading4Alignment];\n    }\n    else if (headingLevel === 5 && style.heading5Alignment) {\n        alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType[style.heading5Alignment];\n    }\n    else if (style.headingAlignment) {\n        // Fallback to general heading alignment if no level-specific alignment\n        alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType[style.headingAlignment];\n    }\n    // Process the heading text to handle markdown formatting (bold/italic)\n    const processedTextRuns = processFormattedTextForHeading(headingText, headingSize, style);\n    // Create the paragraph with bookmark\n    const paragraph = new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n        children: [\n            new docx__WEBPACK_IMPORTED_MODULE_0__.Bookmark({\n                id: bookmarkId,\n                children: processedTextRuns,\n            }),\n        ],\n        heading: headingLevel,\n        spacing: {\n            before: config.level === 1 ? style.headingSpacing * 2 : style.headingSpacing,\n            after: style.headingSpacing / 2,\n        },\n        alignment: alignment,\n        style: `Heading${headingLevel}`, // This is crucial for TOC recognition\n        bidirectional: style.direction === \"RTL\",\n    });\n    return { paragraph, bookmarkId };\n}\n/**\n * Processes formatted text specifically for headings (bold/italic) and returns an array of TextRun objects\n * @param text - The text to process\n * @param fontSize - The font size to apply\n * @returns An array of TextRun objects\n */\nfunction processFormattedTextForHeading(text, fontSize, style) {\n    const textRuns = [];\n    let currentText = \"\";\n    let isBold = false;\n    let isItalic = false;\n    // Track unclosed markers to reset at end if needed\n    let boldStart = -1;\n    let italicStart = -1;\n    for (let j = 0; j < text.length; j++) {\n        // Handle escaped characters\n        if (text[j] === \"\\\\\" && j + 1 < text.length) {\n            const nextChar = text[j + 1];\n            if (nextChar === \"*\" || nextChar === \"\\\\\") {\n                currentText += nextChar;\n                j++; // Skip the escaped character\n                continue;\n            }\n            // If not a recognized escape sequence, treat normally\n            currentText += text[j];\n            continue;\n        }\n        // Handle bold with ** markers\n        if (j + 1 < text.length && text[j] === \"*\" && text[j + 1] === \"*\") {\n            // Flush current text before toggling bold\n            if (currentText) {\n                textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                    text: currentText,\n                    bold: isBold,\n                    italics: isItalic,\n                    color: \"000000\",\n                    size: fontSize,\n                    rightToLeft: style?.direction === \"RTL\",\n                }));\n                currentText = \"\";\n            }\n            // Toggle bold state\n            if (!isBold) {\n                boldStart = j;\n            }\n            else {\n                boldStart = -1;\n            }\n            isBold = !isBold;\n            j++; // Skip the second *\n            continue;\n        }\n        // Handle italic with single * marker (but not if it's part of **)\n        if (text[j] === \"*\" &&\n            (j === 0 || text[j - 1] !== \"*\") &&\n            (j === text.length - 1 || text[j + 1] !== \"*\")) {\n            // Flush current text before toggling italic\n            if (currentText) {\n                textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                    text: currentText,\n                    bold: isBold,\n                    italics: isItalic,\n                    color: \"000000\",\n                    size: fontSize,\n                    rightToLeft: style?.direction === \"RTL\",\n                }));\n                currentText = \"\";\n            }\n            // Toggle italic state\n            if (!isItalic) {\n                italicStart = j;\n            }\n            else {\n                italicStart = -1;\n            }\n            isItalic = !isItalic;\n            continue;\n        }\n        // Add to current text\n        currentText += text[j];\n    }\n    // Handle any remaining text\n    if (currentText) {\n        // If we have unclosed markers, treat them as literal text\n        if (isBold && boldStart >= 0) {\n            // Insert the ** back into the text and turn off bold\n            const beforeBold = currentText;\n            currentText = \"**\" + beforeBold;\n            isBold = false;\n        }\n        if (isItalic && italicStart >= 0) {\n            // Insert the * back into the text and turn off italic\n            const beforeItalic = currentText;\n            currentText = \"*\" + beforeItalic;\n            isItalic = false;\n        }\n        // Only add non-empty text runs\n        if (currentText.trim()) {\n            textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                text: currentText,\n                bold: isBold,\n                italics: isItalic,\n                color: \"000000\",\n                size: fontSize,\n                rightToLeft: style?.direction === \"RTL\",\n            }));\n        }\n    }\n    // If no text runs were created, return a single empty run to avoid empty paragraphs\n    if (textRuns.length === 0) {\n        textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n            text: \"\",\n            color: \"000000\",\n            size: fontSize,\n            bold: true, // Headings are bold by default\n        }));\n    }\n    return textRuns;\n}\n/**\n * Processes a table and returns table formatting\n * @param tableData - The table data\n * @param documentType - The document type\n * @returns The processed table\n */\nfunction processTable(tableData, documentType) {\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.Table({\n        width: { size: 100, type: docx__WEBPACK_IMPORTED_MODULE_0__.WidthType.PERCENTAGE },\n        rows: [\n            new docx__WEBPACK_IMPORTED_MODULE_0__.TableRow({\n                tableHeader: true,\n                children: tableData.headers.map((header) => new docx__WEBPACK_IMPORTED_MODULE_0__.TableCell({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                            alignment: docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER,\n                            style: \"Strong\",\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                                    text: header,\n                                    bold: true,\n                                    color: \"000000\",\n                                }),\n                            ],\n                        }),\n                    ],\n                    shading: {\n                        fill: documentType === \"report\" ? \"DDDDDD\" : \"F2F2F2\",\n                    },\n                })),\n            }),\n            ...tableData.rows.map((row) => new docx__WEBPACK_IMPORTED_MODULE_0__.TableRow({\n                children: row.map((cell) => new docx__WEBPACK_IMPORTED_MODULE_0__.TableCell({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                                    text: cell,\n                                    color: \"000000\",\n                                    rightToLeft: false,\n                                }),\n                            ],\n                        }),\n                    ],\n                })),\n            })),\n        ],\n        layout: docx__WEBPACK_IMPORTED_MODULE_0__.TableLayoutType.FIXED,\n        margins: {\n            top: 100,\n            bottom: 100,\n            left: 100,\n            right: 100,\n        },\n    });\n}\n/**\n * Processes a list item and returns appropriate paragraph formatting\n * @param config - The list item configuration\n * @param style - The style configuration\n * @returns The processed paragraph\n */\nfunction processListItem(config, style) {\n    let textContent = config.text;\n    // Process the main text with formatting\n    const children = processFormattedText(textContent, style);\n    // If there's bold text on the next line, add it with a line break\n    if (config.boldText) {\n        children.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n            text: \"\\n\",\n            size: style.listItemSize || 24,\n        }), new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n            text: config.boldText,\n            bold: true,\n            color: \"000000\",\n            size: style.listItemSize || 24,\n        }));\n    }\n    // Use different formatting for numbered vs bullet lists\n    if (config.isNumbered) {\n        // Use numbering for numbered lists with unique reference per sequence\n        const numberingReference = `numbered-list-${config.sequenceId || 1}`;\n        return new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n            children,\n            numbering: {\n                reference: numberingReference,\n                level: 0,\n            },\n            spacing: {\n                before: style.paragraphSpacing / 2,\n                after: style.paragraphSpacing / 2,\n            },\n            bidirectional: style.direction === \"RTL\",\n        });\n    }\n    else {\n        // Use bullet formatting for bullet lists\n        return new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n            children,\n            bullet: {\n                level: 0,\n            },\n            spacing: {\n                before: style.paragraphSpacing / 2,\n                after: style.paragraphSpacing / 2,\n            },\n            bidirectional: style.direction === \"RTL\",\n        });\n    }\n}\n/**\n * Processes a blockquote and returns appropriate paragraph formatting\n * @param text - The blockquote text\n * @param style - The style configuration\n * @returns The processed paragraph\n */\nfunction processBlockquote(text, style) {\n    // Determine alignment for blockquote - only if explicitly set\n    let alignment = undefined;\n    if (style.blockquoteAlignment) {\n        switch (style.blockquoteAlignment) {\n            case \"LEFT\":\n                alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.LEFT;\n                break;\n            case \"CENTER\":\n                alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER;\n                break;\n            case \"RIGHT\":\n                alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.RIGHT;\n                break;\n            case \"JUSTIFIED\":\n                alignment = docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.JUSTIFIED;\n                break;\n            default:\n                // Don't set alignment if not explicitly defined\n                alignment = undefined;\n        }\n    }\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n        children: [\n            new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                text: text,\n                italics: true,\n                color: \"000000\",\n                size: style.blockquoteSize || 24, // Use custom blockquote size if provided\n                rightToLeft: style.direction === \"RTL\",\n            }),\n        ],\n        indent: {\n            left: 720, // 0.5 inch indent\n        },\n        spacing: {\n            before: style.paragraphSpacing,\n            after: style.paragraphSpacing,\n        },\n        border: {\n            left: {\n                style: docx__WEBPACK_IMPORTED_MODULE_0__.BorderStyle.SINGLE,\n                size: 3,\n                color: \"AAAAAA\",\n            },\n        },\n        alignment: alignment,\n        bidirectional: style.direction === \"RTL\",\n    });\n}\n/**\n * Processes a comment and returns appropriate paragraph formatting\n * @param text - The comment text\n * @param style - The style configuration\n * @returns The processed paragraph\n */\nfunction processComment(text, style) {\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n        children: [\n            new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                text: \"Comment: \" + text,\n                italics: true,\n                color: \"666666\",\n            }),\n        ],\n        spacing: {\n            before: style.paragraphSpacing,\n            after: style.paragraphSpacing,\n        },\n    });\n}\n/**\n * Processes formatted text (bold/italic/inline-code/links) and returns an array of TextRun or ExternalHyperlink objects\n * @param line - The line to process\n * @param style - The style configuration\n * @returns An array of TextRun or ExternalHyperlink objects\n */\nfunction processFormattedText(line, style) {\n    const textRuns = [];\n    let currentText = \"\";\n    let isBold = false;\n    let isItalic = false;\n    let isInlineCode = false;\n    // Track unclosed markers to reset at end if needed\n    let boldStart = -1;\n    let italicStart = -1;\n    for (let j = 0; j < line.length; j++) {\n        // Handle escaped characters\n        if (line[j] === \"\\\\\" && j + 1 < line.length) {\n            const nextChar = line[j + 1];\n            if (nextChar === \"*\" || nextChar === \"`\" || nextChar === \"\\\\\" || nextChar === \"[\" || nextChar === \"]\") {\n                currentText += nextChar;\n                j++; // Skip the escaped character\n                continue;\n            }\n            // If not a recognized escape sequence, treat normally\n            currentText += line[j];\n            continue;\n        }\n        // Handle inline links [text](url) - only when not in inline code\n        if (!isInlineCode && line[j] === \"[\") {\n            // Look for closing ] and then (url)\n            let closeBracket = -1;\n            let openParen = -1;\n            let closeParen = -1;\n            // Find closing bracket\n            for (let k = j + 1; k < line.length; k++) {\n                if (line[k] === \"\\\\\" && k + 1 < line.length) {\n                    k++; // Skip escaped character\n                    continue;\n                }\n                if (line[k] === \"]\") {\n                    closeBracket = k;\n                    break;\n                }\n            }\n            // If we found closing bracket, look for (url)\n            if (closeBracket > j && closeBracket + 1 < line.length && line[closeBracket + 1] === \"(\") {\n                openParen = closeBracket + 1;\n                // Find closing paren\n                for (let k = openParen + 1; k < line.length; k++) {\n                    if (line[k] === \")\") {\n                        closeParen = k;\n                        break;\n                    }\n                }\n            }\n            // If we found a complete link pattern\n            if (closeBracket > j && openParen > closeBracket && closeParen > openParen) {\n                // Flush current text first\n                if (currentText) {\n                    textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                        text: currentText,\n                        bold: isBold,\n                        italics: isItalic,\n                        color: \"000000\",\n                        size: style?.paragraphSize || 24,\n                        rightToLeft: style?.direction === \"RTL\",\n                    }));\n                    currentText = \"\";\n                }\n                // Extract link text and URL\n                const linkText = line.substring(j + 1, closeBracket);\n                const linkUrl = line.substring(openParen + 1, closeParen);\n                // Create hyperlink\n                textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.ExternalHyperlink({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                            text: linkText,\n                            color: \"0000FF\",\n                            underline: { type: \"single\" },\n                            bold: isBold,\n                            italics: isItalic,\n                            size: style?.paragraphSize || 24,\n                            rightToLeft: style?.direction === \"RTL\",\n                        }),\n                    ],\n                    link: linkUrl,\n                }));\n                // Skip to after the link\n                j = closeParen;\n                continue;\n            }\n        }\n        // Handle inline code with backtick\n        if (line[j] === \"`\" && !isInlineCode) {\n            // Starting inline code - flush current text first\n            if (currentText) {\n                textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                    text: currentText,\n                    bold: isBold,\n                    italics: isItalic,\n                    color: \"000000\",\n                    size: style?.paragraphSize || 24,\n                    rightToLeft: style?.direction === \"RTL\",\n                }));\n                currentText = \"\";\n            }\n            isInlineCode = true;\n            continue;\n        }\n        if (line[j] === \"`\" && isInlineCode) {\n            // Ending inline code\n            if (currentText) {\n                textRuns.push(processInlineCode(currentText, style));\n                currentText = \"\";\n            }\n            isInlineCode = false;\n            continue;\n        }\n        // If we're inside inline code, just accumulate text (no formatting)\n        if (isInlineCode) {\n            currentText += line[j];\n            continue;\n        }\n        // Handle bold with ** markers\n        if (j + 1 < line.length && line[j] === \"*\" && line[j + 1] === \"*\") {\n            // Flush current text before toggling bold\n            if (currentText) {\n                textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                    text: currentText,\n                    bold: isBold,\n                    italics: isItalic,\n                    color: \"000000\",\n                    size: style?.paragraphSize || 24,\n                    rightToLeft: style?.direction === \"RTL\",\n                }));\n                currentText = \"\";\n            }\n            // Toggle bold state\n            if (!isBold) {\n                boldStart = j;\n            }\n            else {\n                boldStart = -1;\n            }\n            isBold = !isBold;\n            j++; // Skip the second *\n            continue;\n        }\n        // Handle italic with single * marker (but not if it's part of **)\n        if (line[j] === \"*\" &&\n            (j === 0 || line[j - 1] !== \"*\") &&\n            (j === line.length - 1 || line[j + 1] !== \"*\")) {\n            // Flush current text before toggling italic\n            if (currentText) {\n                textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                    text: currentText,\n                    bold: isBold,\n                    italics: isItalic,\n                    color: \"000000\",\n                    size: style?.paragraphSize || 24,\n                }));\n                currentText = \"\";\n            }\n            // Toggle italic state\n            if (!isItalic) {\n                italicStart = j;\n            }\n            else {\n                italicStart = -1;\n            }\n            isItalic = !isItalic;\n            continue;\n        }\n        // Add to current text\n        currentText += line[j];\n    }\n    // Handle any remaining text\n    if (currentText) {\n        // If we have unclosed markers, treat them as literal text\n        if (isBold && boldStart >= 0) {\n            // Insert the ** back into the text and turn off bold\n            const beforeBold = currentText;\n            currentText = \"**\" + beforeBold;\n            isBold = false;\n        }\n        if (isItalic && italicStart >= 0) {\n            // Insert the * back into the text and turn off italic\n            const beforeItalic = currentText;\n            currentText = \"*\" + beforeItalic;\n            isItalic = false;\n        }\n        if (isInlineCode) {\n            // Unclosed inline code - treat as literal text\n            currentText = \"`\" + currentText;\n        }\n        // Only add non-empty text runs\n        if (currentText.trim()) {\n            textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                text: currentText,\n                bold: isBold,\n                italics: isItalic,\n                color: \"000000\",\n                size: style?.paragraphSize || 24,\n                rightToLeft: style?.direction === \"RTL\",\n            }));\n        }\n    }\n    // If no text runs were created, return a single empty run to avoid empty paragraphs\n    if (textRuns.length === 0) {\n        textRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n            text: \"\",\n            color: \"000000\",\n            size: style?.paragraphSize || 24,\n        }));\n    }\n    return textRuns;\n}\n/**\n * Collects tables from markdown lines\n * @param lines - The markdown lines\n * @returns An array of table data\n */\nfunction collectTables(lines) {\n    const tables = [];\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        if (line.trim().startsWith(\"|\")) {\n            // Check for separator row with proper regex\n            if (i + 1 < lines.length &&\n                /^\\s*\\|(?:\\s*:?-+:?\\s*\\|)+\\s*$/.test(lines[i + 1])) {\n                // Preserve empty cells by slicing off leading/trailing pipe and splitting\n                const headers = line\n                    .trim()\n                    .replace(/^\\|/, \"\")\n                    .replace(/\\|$/, \"\")\n                    .split(\"|\")\n                    .map((h) => h.trim());\n                const rows = [];\n                let j = i + 2;\n                while (j < lines.length && lines[j].trim().startsWith(\"|\")) {\n                    const row = lines[j]\n                        .trim()\n                        .replace(/^\\|/, \"\")\n                        .replace(/\\|$/, \"\")\n                        .split(\"|\")\n                        .map((cell) => cell.trim());\n                    rows.push(row);\n                    j++;\n                }\n                tables.push({ headers, rows });\n            }\n        }\n    }\n    return tables;\n}\n/**\n * Processes inline code and returns a TextRun object\n * @param code - The inline code text\n * @param style - The style configuration\n * @returns A TextRun object\n */\nfunction processInlineCode(code, style) {\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n        text: code,\n        font: \"Courier New\",\n        size: style?.paragraphSize ? style.paragraphSize - 2 : 20,\n        color: \"444444\",\n        shading: {\n            fill: \"F5F5F5\",\n        },\n        rightToLeft: style?.direction === \"RTL\",\n    });\n}\n/**\n * Processes a code block and returns appropriate paragraph formatting\n * @param code - The code block text\n * @param language - The programming language (optional)\n * @param style - The style configuration\n * @returns The processed paragraph\n */\nfunction processCodeBlock(code, language, style) {\n    // Split the code into lines and process each line\n    const lines = code.split(\"\\n\");\n    // Create text runs for each line\n    const codeRuns = [];\n    // Add language indicator if present\n    if (language) {\n        codeRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n            text: language,\n            font: \"Courier New\",\n            size: style.codeBlockSize || 18,\n            color: \"666666\",\n            bold: true,\n            rightToLeft: style.direction === \"RTL\",\n        }), new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n            text: \"\\n\",\n            font: \"Courier New\",\n            size: style.codeBlockSize || 18,\n            break: 1,\n            rightToLeft: style.direction === \"RTL\",\n        }));\n    }\n    // Process each line\n    lines.forEach((line, index) => {\n        // Preserve leading spaces by converting them to non-breaking spaces\n        const leadingSpaces = line.match(/^\\s*/)?.[0].length || 0;\n        const leadingNbsp = \"\\u00A0\".repeat(leadingSpaces);\n        const processedLine = leadingNbsp + line.slice(leadingSpaces);\n        // Add the line\n        codeRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n            text: processedLine,\n            font: \"Courier New\",\n            size: style.codeBlockSize || 20,\n            color: \"444444\",\n            rightToLeft: style.direction === \"RTL\",\n        }));\n        // Add line break if not the last line\n        if (index < lines.length - 1) {\n            codeRuns.push(new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                text: \"\\n\",\n                font: \"Courier New\",\n                size: style.codeBlockSize || 20,\n                break: 1,\n                rightToLeft: style.direction === \"RTL\",\n            }));\n        }\n    });\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n        children: codeRuns,\n        spacing: {\n            before: style.paragraphSpacing,\n            after: style.paragraphSpacing,\n            // Preserve line spacing exactly\n            line: 360,\n            lineRule: \"exact\",\n        },\n        shading: {\n            fill: \"F5F5F5\",\n        },\n        border: {\n            top: { style: docx__WEBPACK_IMPORTED_MODULE_0__.BorderStyle.SINGLE, size: 1, color: \"DDDDDD\" },\n            bottom: { style: docx__WEBPACK_IMPORTED_MODULE_0__.BorderStyle.SINGLE, size: 1, color: \"DDDDDD\" },\n            left: { style: docx__WEBPACK_IMPORTED_MODULE_0__.BorderStyle.SINGLE, size: 1, color: \"DDDDDD\" },\n            right: { style: docx__WEBPACK_IMPORTED_MODULE_0__.BorderStyle.SINGLE, size: 1, color: \"DDDDDD\" },\n        },\n        // Preserve indentation\n        indent: {\n            left: 360, // 0.25 inch indent for the entire code block\n        },\n    });\n}\n/**\n * Processes a link and returns appropriate text run\n */\nfunction processLink(text, url) {\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n        text: text,\n        color: \"0000FF\",\n        underline: { type: \"single\" },\n    });\n}\n/**\n * Processes a link and returns a paragraph with hyperlink\n * @param text - The link text\n * @param url - The link URL\n * @param style - The style configuration\n * @returns The processed paragraph with hyperlink\n */\nfunction processLinkParagraph(text, url, style) {\n    const hyperlink = new docx__WEBPACK_IMPORTED_MODULE_0__.ExternalHyperlink({\n        children: [\n            new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                text: text,\n                color: \"0000FF\",\n                underline: { type: \"single\" },\n                rightToLeft: style.direction === \"RTL\",\n            }),\n        ],\n        link: url,\n    });\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n        children: [hyperlink],\n        spacing: {\n            before: style.paragraphSpacing,\n            after: style.paragraphSpacing,\n        },\n        bidirectional: style.direction === \"RTL\",\n    });\n}\n/**\n * Computes output image dimensions preserving aspect ratio.\n * - If both hints provided, uses them directly.\n * - If one hint provided and intrinsic aspect known, computes the other.\n * - Falls back to intrinsic width capped to 400, or default width 200.\n */\nfunction computeImageDimensions(widthHint, heightHint, intrinsicWidth, intrinsicHeight) {\n    let outWidth;\n    let outHeight;\n    const aspect = intrinsicWidth && intrinsicHeight\n        ? intrinsicWidth / intrinsicHeight\n        : undefined;\n    if (widthHint && heightHint) {\n        outWidth = widthHint;\n        outHeight = heightHint;\n    }\n    else if (widthHint && aspect) {\n        outWidth = widthHint;\n        outHeight = Math.max(1, Math.round(widthHint / aspect));\n    }\n    else if (heightHint && aspect) {\n        outHeight = heightHint;\n        outWidth = Math.max(1, Math.round(heightHint * aspect));\n    }\n    else if (intrinsicWidth) {\n        outWidth = Math.min(intrinsicWidth, 400);\n        if (aspect)\n            outHeight = Math.max(1, Math.round(outWidth / aspect));\n    }\n    else {\n        outWidth = 200;\n    }\n    return { width: outWidth, height: outHeight };\n}\n/**\n * Creates a simple link paragraph\n * @param text - The link text\n * @param url - The URL to link to\n * @returns A paragraph with a hyperlink\n */\nfunction createLinkParagraph(text, url) {\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n        children: [\n            new docx__WEBPACK_IMPORTED_MODULE_0__.ExternalHyperlink({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                        text: text,\n                        color: \"0000FF\",\n                        underline: { type: \"single\" },\n                    }),\n                ],\n                link: url,\n            }),\n        ],\n    });\n}\n/**\n * Processes an image and returns appropriate paragraph\n * @param altText - The alt text\n * @param imageUrl - The image URL\n * @param style - The style configuration\n * @returns The processed paragraph\n */\nasync function processImage(altText, imageUrl, style) {\n    try {\n        // Support data URLs without fetch and extract raw data/content-type\n        let data;\n        let contentType = \"\";\n        if (/^data:/i.test(imageUrl)) {\n            // data:[<mediatype>][;base64],<data>\n            const match = imageUrl.match(/^data:([^;,]*)(;base64)?,(.*)$/i);\n            if (!match) {\n                throw new Error(\"Invalid data URL for image\");\n            }\n            contentType = match[1] || \"\";\n            const isBase64 = !!match[2];\n            const dataPart = match[3];\n            const binary = isBase64\n                ? typeof Buffer !== \"undefined\"\n                    ? Buffer.from(dataPart, \"base64\")\n                    : Uint8Array.from(atob(dataPart), (c) => c.charCodeAt(0))\n                : typeof Buffer !== \"undefined\"\n                    ? Buffer.from(decodeURIComponent(dataPart))\n                    : new TextEncoder().encode(decodeURIComponent(dataPart));\n            data = binary;\n        }\n        else {\n            const response = await fetch(imageUrl);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);\n            }\n            const arrayBuffer = await response.arrayBuffer();\n            // Use Buffer in Node environments, Uint8Array in browsers\n            data =\n                typeof Buffer !== \"undefined\"\n                    ? Buffer.from(arrayBuffer)\n                    : new Uint8Array(arrayBuffer);\n            // Infer image type from content-type header or URL extension\n            contentType = response.headers.get(\"content-type\") || \"\";\n        }\n        let imageType = \"png\";\n        if (/jpeg|jpg/i.test(contentType) || /\\.(jpe?g)(\\?|$)/i.test(imageUrl)) {\n            imageType = \"jpg\";\n        }\n        else if (/png/i.test(contentType) || /\\.(png)(\\?|$)/i.test(imageUrl)) {\n            imageType = \"png\";\n        }\n        else if (/gif/i.test(contentType) || /\\.(gif)(\\?|$)/i.test(imageUrl)) {\n            imageType = \"gif\";\n        }\n        // Parse optional width/height hints from URL fragment\n        let widthHint;\n        let heightHint;\n        const hashIndex = imageUrl.indexOf(\"#\");\n        if (hashIndex >= 0) {\n            const fragment = imageUrl.substring(hashIndex + 1);\n            // Pattern #<width>x<height>\n            const wxh = fragment.match(/^(\\d+)x(\\d+)$/);\n            if (wxh) {\n                widthHint = parseInt(wxh[1], 10);\n                heightHint = parseInt(wxh[2], 10);\n            }\n            else {\n                // Pattern #w=123&h=45 or #width=..&height=..\n                const params = new URLSearchParams(fragment.replace(/&amp;/g, \"&\"));\n                const w = params.get(\"w\") || params.get(\"width\");\n                const h = params.get(\"h\") || params.get(\"height\");\n                if (w && /^\\d+$/.test(w))\n                    widthHint = parseInt(w, 10);\n                if (h && /^\\d+$/.test(h))\n                    heightHint = parseInt(h, 10);\n            }\n        }\n        // Extract intrinsic dimensions and compute output to preserve aspect ratio\n        function readUint16BE(buf, offset) {\n            return (buf[offset] << 8) | buf[offset + 1];\n        }\n        function readUint32BE(buf, offset) {\n            return (((buf[offset] << 24) |\n                (buf[offset + 1] << 16) |\n                (buf[offset + 2] << 8) |\n                buf[offset + 3]) >>>\n                0);\n        }\n        let intrinsicWidth;\n        let intrinsicHeight;\n        const bytes = data instanceof Uint8Array ? data : new Uint8Array(data);\n        if (imageType === \"png\" && bytes.length >= 24) {\n            const isPng = bytes[0] === 0x89 &&\n                bytes[1] === 0x50 &&\n                bytes[2] === 0x4e &&\n                bytes[3] === 0x47;\n            if (isPng) {\n                intrinsicWidth = readUint32BE(bytes, 16);\n                intrinsicHeight = readUint32BE(bytes, 20);\n            }\n        }\n        else if (imageType === \"jpg\") {\n            let offset = 2; // skip SOI\n            while (offset + 9 < bytes.length) {\n                if (bytes[offset] !== 0xff)\n                    break;\n                const marker = bytes[offset + 1];\n                const length = readUint16BE(bytes, offset + 2);\n                if (marker === 0xc0 || marker === 0xc2) {\n                    intrinsicHeight = readUint16BE(bytes, offset + 5);\n                    intrinsicWidth = readUint16BE(bytes, offset + 7);\n                    break;\n                }\n                offset += 2 + length;\n            }\n        }\n        else if (imageType === \"gif\" && bytes.length >= 10) {\n            intrinsicWidth = bytes[6] | (bytes[7] << 8);\n            intrinsicHeight = bytes[8] | (bytes[9] << 8);\n        }\n        let outWidth;\n        let outHeight;\n        const aspect = intrinsicWidth && intrinsicHeight\n            ? intrinsicWidth / intrinsicHeight\n            : undefined;\n        if (widthHint && heightHint) {\n            outWidth = widthHint;\n            outHeight = heightHint;\n        }\n        else if (widthHint && aspect) {\n            outWidth = widthHint;\n            outHeight = Math.max(1, Math.round(widthHint / aspect));\n        }\n        else if (heightHint && aspect) {\n            outHeight = heightHint;\n            outWidth = Math.max(1, Math.round(heightHint * aspect));\n        }\n        else if (intrinsicWidth) {\n            outWidth = Math.min(intrinsicWidth, 400);\n            if (aspect)\n                outHeight = Math.max(1, Math.round(outWidth / aspect));\n        }\n        else {\n            outWidth = 200;\n        }\n        // Create a paragraph with just the image, no hyperlink\n        return [\n            new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_0__.ImageRun({\n                        data,\n                        transformation: outHeight\n                            ? { width: outWidth, height: outHeight }\n                            : { width: outWidth, height: 1 },\n                        type: imageType,\n                    }),\n                ],\n                alignment: docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER,\n                spacing: {\n                    before: style.paragraphSpacing,\n                    after: style.paragraphSpacing,\n                },\n            }),\n        ];\n    }\n    catch (error) {\n        console.error(\"Error in processImage:\", error);\n        console.error(\"Error stack:\", error instanceof Error ? error.stack : \"No stack available\");\n        return [\n            new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                        text: `[Image could not be displayed: ${altText}]`,\n                        italics: true,\n                        color: \"FF0000\",\n                    }),\n                ],\n                alignment: docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER,\n            }),\n        ];\n    }\n}\n/**\n * Processes a paragraph and returns appropriate paragraph formatting\n * @param text - The paragraph text\n * @param style - The style configuration\n * @returns The processed paragraph\n */\nfunction processParagraph(text, style) {\n    // Use processFormattedText to handle all inline formatting\n    const textRuns = processFormattedText(text, style);\n    // Default alignment uses direct enum value\n    const alignment = style.paragraphAlignment\n        ? style.paragraphAlignment === \"CENTER\"\n            ? docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER\n            : style.paragraphAlignment === \"RIGHT\"\n                ? docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.RIGHT\n                : style.paragraphAlignment === \"JUSTIFIED\"\n                    ? docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.JUSTIFIED\n                    : docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.LEFT\n        : docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.LEFT;\n    // Only apply indent for justified text\n    const indent = style.paragraphAlignment === \"JUSTIFIED\"\n        ? { left: 0, right: 0 }\n        : undefined;\n    return new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n        children: textRuns,\n        spacing: {\n            before: style.paragraphSpacing,\n            after: style.paragraphSpacing,\n            line: style.lineSpacing * 240,\n        },\n        alignment,\n        indent,\n        bidirectional: style.direction === \"RTL\",\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mohtasham/md-to-docx/dist/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mohtasham/md-to-docx/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mohtasham/md-to-docx/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MarkdownConversionError: () => (/* binding */ MarkdownConversionError),\n/* harmony export */   convertMarkdownToDocx: () => (/* binding */ convertMarkdownToDocx),\n/* harmony export */   downloadDocx: () => (/* binding */ downloadDocx),\n/* harmony export */   parseToDocxOptions: () => (/* binding */ parseToDocxOptions)\n/* harmony export */ });\n/* harmony import */ var docx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! docx */ \"(ssr)/./node_modules/docx/dist/index.mjs\");\n/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! file-saver */ \"(ssr)/./node_modules/file-saver/dist/FileSaver.min.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@mohtasham/md-to-docx/dist/types.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@mohtasham/md-to-docx/dist/helpers.js\");\n\n\n\n\nconst defaultStyle = {\n    titleSize: 32,\n    headingSpacing: 240,\n    paragraphSpacing: 240,\n    lineSpacing: 1.15,\n    paragraphAlignment: \"LEFT\",\n    direction: \"LTR\",\n};\nconst defaultOptions = {\n    documentType: \"document\",\n    style: defaultStyle,\n};\n/**\n * Custom error class for markdown conversion errors\n * @extends Error\n * @param message - The error message\n * @param context - The context of the error\n */\nclass MarkdownConversionError extends Error {\n    constructor(message, context) {\n        super(message);\n        this.context = context;\n        this.name = \"MarkdownConversionError\";\n    }\n}\n/**\n * Validates markdown input and options\n * @throws {MarkdownConversionError} If input is invalid\n */\nfunction validateInput(markdown, options) {\n    if (!markdown || typeof markdown !== \"string\") {\n        throw new MarkdownConversionError(\"Invalid markdown input: Markdown must be a non-empty string\");\n    }\n    if (options.style) {\n        const { titleSize, headingSpacing, paragraphSpacing, lineSpacing } = options.style;\n        if (titleSize && (titleSize < 8 || titleSize > 72)) {\n            throw new MarkdownConversionError(\"Invalid title size: Must be between 8 and 72 points\", { titleSize });\n        }\n        if (headingSpacing && (headingSpacing < 0 || headingSpacing > 720)) {\n            throw new MarkdownConversionError(\"Invalid heading spacing: Must be between 0 and 720 twips\", { headingSpacing });\n        }\n        if (paragraphSpacing && (paragraphSpacing < 0 || paragraphSpacing > 720)) {\n            throw new MarkdownConversionError(\"Invalid paragraph spacing: Must be between 0 and 720 twips\", { paragraphSpacing });\n        }\n        if (lineSpacing && (lineSpacing < 1 || lineSpacing > 3)) {\n            throw new MarkdownConversionError(\"Invalid line spacing: Must be between 1 and 3\", { lineSpacing });\n        }\n    }\n}\n/**\n * Convert Markdown to Docx file\n * @param markdown - The Markdown string to convert\n * @param options - The options for the conversion\n * @returns A Promise that resolves to a Blob containing the Docx file\n * @throws {MarkdownConversionError} If conversion fails\n */\nasync function convertMarkdownToDocx(markdown, options = defaultOptions) {\n    try {\n        const docxOptions = await parseToDocxOptions(markdown, options);\n        // Create the document with appropriate settings\n        const doc = new docx__WEBPACK_IMPORTED_MODULE_0__.Document(docxOptions);\n        return await docx__WEBPACK_IMPORTED_MODULE_0__.Packer.toBlob(doc);\n    }\n    catch (error) {\n        if (error instanceof MarkdownConversionError) {\n            throw error;\n        }\n        throw new MarkdownConversionError(`Failed to convert markdown to docx: ${error instanceof Error ? error.message : \"Unknown error\"}`, { originalError: error });\n    }\n}\n/**\n * Convert Markdown to Docx options\n * @param markdown - The Markdown string to convert\n * @param options - The options for the conversion\n * @returns A Promise that resolves to a Blob containing the Docx file\n * @throws {MarkdownConversionError} If conversion fails\n */\nasync function parseToDocxOptions(markdown, options = defaultOptions) {\n    try {\n        // Validate inputs early\n        validateInput(markdown, options);\n        const { style = defaultStyle, documentType = \"document\" } = options;\n        const docChildren = [];\n        const headings = [];\n        const lines = markdown.split(\"\\n\");\n        let inList = false;\n        let listItems = [];\n        let currentListNumber = 1;\n        let isCurrentListNumbered = false;\n        let numberedListSequenceId = 0;\n        let inCodeBlock = false;\n        let codeBlockContent = \"\";\n        let codeBlockLanguage;\n        let tableIndex = 0;\n        const tables = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.collectTables)(lines);\n        for (let i = 0; i < lines.length; i++) {\n            try {\n                const line = lines[i];\n                const trimmedLine = line.trim();\n                // Skip empty lines\n                if (!trimmedLine) {\n                    if (inCodeBlock) {\n                        codeBlockContent += \"\\n\";\n                    }\n                    if (inList) {\n                        docChildren.push(...listItems);\n                        listItems = [];\n                        inList = false;\n                        currentListNumber = 1;\n                        isCurrentListNumbered = false;\n                    }\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({}));\n                    continue;\n                }\n                // Handle Page Break\n                if (trimmedLine === \"\\\\pagebreak\") {\n                    if (inList) {\n                        docChildren.push(...listItems);\n                        listItems = [];\n                        inList = false;\n                        currentListNumber = 1;\n                        isCurrentListNumbered = false;\n                    }\n                    docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({ children: [new docx__WEBPACK_IMPORTED_MODULE_0__.PageBreak()] }));\n                    continue;\n                }\n                // Handle Markdown Separators (e.g., ---)\n                if (/^\\s*---\\s*$/.test(trimmedLine)) {\n                    if (inList) {\n                        docChildren.push(...listItems);\n                        listItems = [];\n                        inList = false;\n                        currentListNumber = 1;\n                        isCurrentListNumbered = false;\n                    }\n                    // Skip the separator line\n                    continue;\n                }\n                // Handle TOC Placeholder\n                if (trimmedLine === \"[TOC]\") {\n                    if (inList) {\n                        docChildren.push(...listItems);\n                        listItems = [];\n                        inList = false;\n                    }\n                    // Create a paragraph and add a unique property to identify it later\n                    const tocPlaceholder = new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({});\n                    tocPlaceholder.__isTocPlaceholder = true; // Add temporary marker property\n                    docChildren.push(tocPlaceholder);\n                    continue;\n                }\n                // Handle code blocks\n                if (trimmedLine.startsWith(\"```\")) {\n                    if (!inCodeBlock) {\n                        // Start of code block\n                        inCodeBlock = true;\n                        codeBlockLanguage = trimmedLine.slice(3).trim() || undefined;\n                        codeBlockContent = \"\";\n                    }\n                    else {\n                        // End of code block\n                        inCodeBlock = false;\n                        docChildren.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processCodeBlock)(codeBlockContent.trim(), codeBlockLanguage, style));\n                        codeBlockContent = \"\";\n                        codeBlockLanguage = undefined;\n                    }\n                    continue;\n                }\n                if (inCodeBlock) {\n                    codeBlockContent += (codeBlockContent ? \"\\n\" : \"\") + line;\n                    continue;\n                }\n                // Process headings\n                if (trimmedLine.startsWith(\"#\")) {\n                    const match = trimmedLine.match(/^#+/);\n                    if (match) {\n                        const level = match[0].length;\n                        if (level >= 1 && level <= 5) {\n                            if (inList) {\n                                docChildren.push(...listItems);\n                                listItems = [];\n                                inList = false;\n                            }\n                            const headingText = trimmedLine.substring(level).trim();\n                            const config = {\n                                ..._types_js__WEBPACK_IMPORTED_MODULE_2__.headingConfigs[level],\n                                alignment: _types_js__WEBPACK_IMPORTED_MODULE_2__.headingConfigs[level].alignment || style.headingAlignment,\n                            };\n                            const { paragraph: headingParagraph, bookmarkId } = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processHeading)(trimmedLine, config, style, documentType);\n                            headings.push({ text: headingText, level, bookmarkId });\n                            docChildren.push(headingParagraph);\n                            continue;\n                        }\n                        // Graceful degradation for unsupported heading levels\n                        console.warn(`Warning: Heading level ${level} is not supported. Converting to regular paragraph.`);\n                    }\n                }\n                // Handle tables\n                if (trimmedLine.startsWith(\"|\") && trimmedLine.endsWith(\"|\")) {\n                    // Support standard and aligned separator rows (with optional leading/trailing colons)\n                    const separatorRegex = /^\\s*\\|(?:\\s*:?-+:?\\s*\\|)+\\s*$/;\n                    if (i + 1 < lines.length &&\n                        (separatorRegex.test(lines[i + 1]) ||\n                            (i + 2 < lines.length && separatorRegex.test(lines[i + 2])))) {\n                        if (inList) {\n                            docChildren.push(...listItems);\n                            listItems = [];\n                            inList = false;\n                        }\n                        if (tableIndex < tables.length) {\n                            try {\n                                docChildren.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processTable)(tables[tableIndex], documentType));\n                                const tableRowCount = 2 + tables[tableIndex].rows.length;\n                                i += tableRowCount - 1;\n                                tableIndex++;\n                                continue;\n                            }\n                            catch (error) {\n                                console.warn(`Warning: Failed to process table at line ${i + 1}. Converting to regular text.`);\n                                // Fallback to regular text\n                                docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                                    children: [\n                                        new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                                            text: trimmedLine.replace(/\\|/g, \"\").trim(),\n                                            color: \"000000\",\n                                        }),\n                                    ],\n                                    bidirectional: style.direction === \"RTL\",\n                                }));\n                                continue;\n                            }\n                        }\n                    }\n                }\n                // Handle lists\n                if (trimmedLine.startsWith(\"- \") || trimmedLine.startsWith(\"* \")) {\n                    // Reset if switching from numbered to bullet list\n                    if (isCurrentListNumbered) {\n                        currentListNumber = 1;\n                        isCurrentListNumbered = false;\n                    }\n                    inList = true;\n                    const listText = trimmedLine.replace(/^[-*]\\s+/, \"\").trim();\n                    // Check if there's a bold section on the next line\n                    let boldText = \"\";\n                    if (i + 1 < lines.length &&\n                        lines[i + 1].trim().startsWith(\"**\") &&\n                        lines[i + 1].trim().endsWith(\"**\")) {\n                        boldText = lines[i + 1].trim().slice(2, -2); // Remove ** markers\n                        i++;\n                    }\n                    listItems.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processListItem)({ text: listText, boldText }, style));\n                    continue;\n                }\n                // Handle numbered lists\n                if (/^\\s*\\d+\\.\\s/.test(trimmedLine)) {\n                    // Check if we need to start a new numbered list sequence\n                    if (!isCurrentListNumbered || !inList) {\n                        // Starting a new numbered list sequence\n                        numberedListSequenceId++;\n                        currentListNumber = 1;\n                        isCurrentListNumbered = true;\n                    }\n                    inList = true;\n                    const listText = trimmedLine.replace(/^\\s*\\d+\\.\\s/, \"\").trim();\n                    // Check if there's a bold section on the next line\n                    let boldText = \"\";\n                    if (i + 1 < lines.length &&\n                        lines[i + 1].trim().startsWith(\"**\") &&\n                        lines[i + 1].trim().endsWith(\"**\")) {\n                        boldText = lines[i + 1].trim().slice(2, -2); // Remove ** markers\n                        i++;\n                    }\n                    listItems.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processListItem)({\n                        text: listText,\n                        boldText,\n                        isNumbered: true,\n                        listNumber: currentListNumber,\n                        sequenceId: numberedListSequenceId,\n                    }, style));\n                    currentListNumber++;\n                    continue;\n                }\n                // Handle blockquotes\n                if (trimmedLine.startsWith(\"> \")) {\n                    if (inList) {\n                        docChildren.push(...listItems);\n                        listItems = [];\n                        inList = false;\n                    }\n                    const quoteText = trimmedLine.replace(/^>\\s*/, \"\").trim();\n                    docChildren.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processBlockquote)(quoteText, style));\n                    continue;\n                }\n                // Handle comments\n                if (trimmedLine.startsWith(\"COMMENT:\")) {\n                    if (inList) {\n                        docChildren.push(...listItems);\n                        listItems = [];\n                        inList = false;\n                    }\n                    const commentText = trimmedLine.replace(/^COMMENT:\\s*/, \"\").trim();\n                    docChildren.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processComment)(commentText, style));\n                    continue;\n                }\n                // Handle images\n                const imageMatch = trimmedLine.match(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/);\n                if (imageMatch) {\n                    const [_, altText, imageUrl] = imageMatch;\n                    // Process images synchronously to ensure they're fully loaded\n                    try {\n                        const imageParagraphs = await (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processImage)(altText, imageUrl, style);\n                        docChildren.push(...imageParagraphs);\n                    }\n                    catch (error) {\n                        console.error(`Error in image processing: ${error instanceof Error ? error.message : String(error)}`);\n                        docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                                    text: `[Image could not be loaded: ${altText}]`,\n                                    italics: true,\n                                    color: \"FF0000\",\n                                }),\n                            ],\n                            alignment: docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER,\n                            bidirectional: style.direction === \"RTL\",\n                        }));\n                    }\n                    continue;\n                }\n                // Handle standalone links (entire line is a single link) - inline links are handled in processParagraph\n                const linkMatch = trimmedLine.match(/^\\[([^\\]]+)\\]\\(([^)]+)\\)$/);\n                if (linkMatch) {\n                    const [_, text, url] = linkMatch;\n                    docChildren.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processLinkParagraph)(text, url, style));\n                    continue;\n                }\n                // Regular paragraph text with special formatting (use trimmedLine for processing)\n                if (!inList) {\n                    try {\n                        docChildren.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processParagraph)(trimmedLine, style));\n                    }\n                    catch (error) {\n                        // Fallback to plain text if formatting fails\n                        console.warn(`Warning: Failed to process text formatting at line ${i + 1}: ${error instanceof Error ? error.message : String(error)}. Using plain text.`);\n                        docChildren.push(new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                                    text: trimmedLine,\n                                    color: \"000000\",\n                                    size: style.paragraphSize || 24,\n                                }),\n                            ],\n                            spacing: {\n                                before: style.paragraphSpacing,\n                                after: style.paragraphSpacing,\n                                line: style.lineSpacing * 240,\n                            },\n                            alignment: style.paragraphAlignment\n                                ? docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType[style.paragraphAlignment]\n                                : undefined,\n                        }));\n                    }\n                    continue;\n                }\n                // Removed the fallback 'isContinuation' list item processing as it was causing type errors\n                // and needs a more robust implementation if required.\n            }\n            catch (error) {\n                // Log error and continue with next line\n                console.warn(`Warning: Failed to process line ${i + 1}: ${error instanceof Error ? error.message : \"Unknown error\"}. Skipping line.`);\n                continue;\n            }\n        }\n        // Handle any remaining code block\n        if (inCodeBlock && codeBlockContent) {\n            docChildren.push((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.processCodeBlock)(codeBlockContent.trim(), codeBlockLanguage, style));\n        }\n        // Add any remaining list items\n        if (inList && listItems.length > 0) {\n            docChildren.push(...listItems);\n        }\n        // Generate TOC content\n        const tocContent = [];\n        if (headings.length > 0) {\n            // Optional: Add a title for the TOC\n            tocContent.push(new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                text: \"Table of Contents\",\n                heading: \"Heading1\", // Or a specific TOC title style\n                alignment: docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER,\n                spacing: { after: 240 },\n                bidirectional: style.direction === \"RTL\",\n            }));\n            headings.forEach((heading) => {\n                // Determine font size based on heading level\n                let fontSize;\n                let isBold = false;\n                let isItalic = false;\n                // Apply level-specific styles if provided\n                switch (heading.level) {\n                    case 1:\n                        fontSize = style.tocHeading1FontSize || style.tocFontSize;\n                        isBold =\n                            style.tocHeading1Bold !== undefined\n                                ? style.tocHeading1Bold\n                                : true;\n                        isItalic = style.tocHeading1Italic || false;\n                        break;\n                    case 2:\n                        fontSize = style.tocHeading2FontSize || style.tocFontSize;\n                        isBold =\n                            style.tocHeading2Bold !== undefined\n                                ? style.tocHeading2Bold\n                                : false;\n                        isItalic = style.tocHeading2Italic || false;\n                        break;\n                    case 3:\n                        fontSize = style.tocHeading3FontSize || style.tocFontSize;\n                        isBold = style.tocHeading3Bold || false;\n                        isItalic = style.tocHeading3Italic || false;\n                        break;\n                    case 4:\n                        fontSize = style.tocHeading4FontSize || style.tocFontSize;\n                        isBold = style.tocHeading4Bold || false;\n                        isItalic = style.tocHeading4Italic || false;\n                        break;\n                    case 5:\n                        fontSize = style.tocHeading5FontSize || style.tocFontSize;\n                        isBold = style.tocHeading5Bold || false;\n                        isItalic = style.tocHeading5Italic || false;\n                        break;\n                    default:\n                        fontSize = style.tocFontSize;\n                }\n                // Use default calculation if no specific size provided\n                if (!fontSize) {\n                    fontSize = style.paragraphSize\n                        ? style.paragraphSize - (heading.level - 1) * 2\n                        : 24 - (heading.level - 1) * 2;\n                }\n                tocContent.push(new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_0__.InternalHyperlink({\n                            anchor: heading.bookmarkId,\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                                    text: heading.text,\n                                    size: fontSize,\n                                    bold: isBold,\n                                    italics: isItalic,\n                                }),\n                            ],\n                        }),\n                    ],\n                    // Indentation based on heading level\n                    indent: { left: (heading.level - 1) * 400 },\n                    spacing: { after: 120 }, // Spacing between TOC items\n                    bidirectional: style.direction === \"RTL\",\n                }));\n            });\n        }\n        // Replace placeholder with TOC content\n        const finalDocChildren = [];\n        let tocInserted = false;\n        docChildren.forEach((child) => {\n            // Check for the marker property instead of inspecting content\n            if (child.__isTocPlaceholder === true) {\n                if (tocContent.length > 0 && !tocInserted) {\n                    finalDocChildren.push(...tocContent);\n                    tocInserted = true; // Ensure TOC is inserted only once\n                }\n                else {\n                    // If no headings were found or TOC already inserted, remove placeholder\n                    console.warn(\"TOC placeholder found, but no headings collected or TOC already inserted.\");\n                }\n            }\n            else {\n                finalDocChildren.push(child);\n            }\n        });\n        // Create numbering configurations for all numbered list sequences\n        const numberingConfigs = [];\n        for (let i = 1; i <= numberedListSequenceId; i++) {\n            numberingConfigs.push({\n                reference: `numbered-list-${i}`,\n                levels: [\n                    {\n                        level: 0,\n                        format: docx__WEBPACK_IMPORTED_MODULE_0__.LevelFormat.DECIMAL,\n                        text: \"%1.\",\n                        alignment: docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.LEFT,\n                        style: {\n                            paragraph: {\n                                indent: { left: 720, hanging: 260 },\n                            },\n                        },\n                    },\n                ],\n            });\n        }\n        // Create the document with appropriate settings\n        const docxOptions = {\n            numbering: {\n                config: numberingConfigs,\n            },\n            sections: [\n                {\n                    properties: {\n                        page: {\n                            margin: {\n                                top: 1440,\n                                right: 1080,\n                                bottom: 1440,\n                                left: 1080,\n                            },\n                            size: {\n                                orientation: docx__WEBPACK_IMPORTED_MODULE_0__.PageOrientation.PORTRAIT,\n                            },\n                        },\n                    },\n                    footers: {\n                        default: new docx__WEBPACK_IMPORTED_MODULE_0__.Footer({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_0__.Paragraph({\n                                    alignment: docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER,\n                                    children: [\n                                        new docx__WEBPACK_IMPORTED_MODULE_0__.TextRun({\n                                            children: [docx__WEBPACK_IMPORTED_MODULE_0__.PageNumber.CURRENT],\n                                        }),\n                                    ],\n                                }),\n                            ],\n                        }),\n                    },\n                    children: finalDocChildren,\n                },\n            ],\n            styles: {\n                paragraphStyles: [\n                    {\n                        id: \"Title\",\n                        name: \"Title\",\n                        basedOn: \"Normal\",\n                        next: \"Normal\",\n                        quickFormat: true,\n                        run: {\n                            size: style.titleSize,\n                            bold: true,\n                            color: \"000000\",\n                        },\n                        paragraph: {\n                            spacing: {\n                                after: 240,\n                                line: style.lineSpacing * 240,\n                            },\n                            alignment: docx__WEBPACK_IMPORTED_MODULE_0__.AlignmentType.CENTER,\n                        },\n                    },\n                    {\n                        id: \"Heading1\",\n                        name: \"Heading 1\",\n                        basedOn: \"Normal\",\n                        next: \"Normal\",\n                        quickFormat: true,\n                        run: {\n                            size: style.titleSize,\n                            bold: true,\n                            color: \"000000\",\n                        },\n                        paragraph: {\n                            spacing: {\n                                before: 360,\n                                after: 240,\n                            },\n                            outlineLevel: 1,\n                        },\n                    },\n                    {\n                        id: \"Heading2\",\n                        name: \"Heading 2\",\n                        basedOn: \"Normal\",\n                        next: \"Normal\",\n                        quickFormat: true,\n                        run: {\n                            size: style.titleSize - 4,\n                            bold: true,\n                            color: \"000000\",\n                        },\n                        paragraph: {\n                            spacing: {\n                                before: 320,\n                                after: 160,\n                            },\n                            outlineLevel: 2,\n                        },\n                    },\n                    {\n                        id: \"Heading3\",\n                        name: \"Heading 3\",\n                        basedOn: \"Normal\",\n                        next: \"Normal\",\n                        quickFormat: true,\n                        run: {\n                            size: style.titleSize - 8,\n                            bold: true,\n                            color: \"000000\",\n                        },\n                        paragraph: {\n                            spacing: {\n                                before: 280,\n                                after: 120,\n                            },\n                            outlineLevel: 3,\n                        },\n                    },\n                    {\n                        id: \"Heading4\",\n                        name: \"Heading 4\",\n                        basedOn: \"Normal\",\n                        next: \"Normal\",\n                        quickFormat: true,\n                        run: {\n                            size: style.titleSize - 12,\n                            bold: true,\n                            color: \"000000\",\n                        },\n                        paragraph: {\n                            spacing: {\n                                before: 240,\n                                after: 120,\n                            },\n                            outlineLevel: 4,\n                        },\n                    },\n                    {\n                        id: \"Heading5\",\n                        name: \"Heading 5\",\n                        basedOn: \"Normal\",\n                        next: \"Normal\",\n                        quickFormat: true,\n                        run: {\n                            size: style.titleSize - 16,\n                            bold: true,\n                            color: \"000000\",\n                        },\n                        paragraph: {\n                            spacing: {\n                                before: 220,\n                                after: 100,\n                            },\n                            outlineLevel: 5,\n                        },\n                    },\n                    {\n                        id: \"Strong\",\n                        name: \"Strong\",\n                        run: {\n                            bold: true,\n                        },\n                    },\n                ],\n            },\n        };\n        return docxOptions;\n    }\n    catch (error) {\n        if (error instanceof MarkdownConversionError) {\n            throw error;\n        }\n        throw new MarkdownConversionError(`Failed to convert markdown to docx: ${error instanceof Error ? error.message : \"Unknown error\"}`, { originalError: error });\n    }\n}\n/**\n * Downloads a DOCX file in the browser environment\n * @param blob - The Blob containing the DOCX file data\n * @param filename - The name to save the file as (defaults to \"document.docx\")\n * @throws {Error} If the function is called outside browser environment\n * @throws {Error} If invalid blob or filename is provided\n * @throws {Error} If file save fails\n */\nfunction downloadDocx(blob, filename = \"document.docx\") {\n    if (typeof window === \"undefined\") {\n        throw new Error(\"This function can only be used in browser environments\");\n    }\n    if (!(blob instanceof Blob)) {\n        throw new Error(\"Invalid blob provided\");\n    }\n    if (!filename || typeof filename !== \"string\") {\n        throw new Error(\"Invalid filename provided\");\n    }\n    try {\n        file_saver__WEBPACK_IMPORTED_MODULE_1__(blob, filename);\n    }\n    catch (error) {\n        console.error(\"Failed to save file:\", error);\n        throw new Error(`Failed to save file: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mohtasham/md-to-docx/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mohtasham/md-to-docx/dist/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mohtasham/md-to-docx/dist/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultStyle: () => (/* binding */ defaultStyle),\n/* harmony export */   headingConfigs: () => (/* binding */ headingConfigs)\n/* harmony export */ });\nconst defaultStyle = {\n    titleSize: 32,\n    headingSpacing: 240,\n    paragraphSpacing: 240,\n    lineSpacing: 1.15,\n    direction: \"LTR\",\n    // Default font sizes\n    heading1Size: 32,\n    heading2Size: 28,\n    heading3Size: 24,\n    heading4Size: 20,\n    heading5Size: 18,\n    paragraphSize: 24,\n    listItemSize: 24,\n    codeBlockSize: 20,\n    blockquoteSize: 24,\n    // Default alignments\n    paragraphAlignment: \"LEFT\",\n    heading1Alignment: \"LEFT\",\n    heading2Alignment: \"LEFT\",\n    heading3Alignment: \"LEFT\",\n    heading4Alignment: \"LEFT\",\n    heading5Alignment: \"LEFT\",\n    blockquoteAlignment: \"LEFT\",\n    headingAlignment: \"LEFT\",\n};\nconst headingConfigs = {\n    1: { level: 1, size: 0, style: \"Title\" },\n    2: { level: 2, size: 0, style: \"Heading2\" },\n    3: { level: 3, size: 0 },\n    4: { level: 4, size: 0 },\n    5: { level: 5, size: 0 },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vaHRhc2hhbS9tZC10by1kb2N4L2Rpc3QvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxTQUFTLG1DQUFtQztBQUM1QyxTQUFTLHNDQUFzQztBQUMvQyxTQUFTLG1CQUFtQjtBQUM1QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLG1CQUFtQjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21kLXRvLWRvY3gvLi9ub2RlX21vZHVsZXMvQG1vaHRhc2hhbS9tZC10by1kb2N4L2Rpc3QvdHlwZXMuanM/ZWY3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICAgIHRpdGxlU2l6ZTogMzIsXG4gICAgaGVhZGluZ1NwYWNpbmc6IDI0MCxcbiAgICBwYXJhZ3JhcGhTcGFjaW5nOiAyNDAsXG4gICAgbGluZVNwYWNpbmc6IDEuMTUsXG4gICAgZGlyZWN0aW9uOiBcIkxUUlwiLFxuICAgIC8vIERlZmF1bHQgZm9udCBzaXplc1xuICAgIGhlYWRpbmcxU2l6ZTogMzIsXG4gICAgaGVhZGluZzJTaXplOiAyOCxcbiAgICBoZWFkaW5nM1NpemU6IDI0LFxuICAgIGhlYWRpbmc0U2l6ZTogMjAsXG4gICAgaGVhZGluZzVTaXplOiAxOCxcbiAgICBwYXJhZ3JhcGhTaXplOiAyNCxcbiAgICBsaXN0SXRlbVNpemU6IDI0LFxuICAgIGNvZGVCbG9ja1NpemU6IDIwLFxuICAgIGJsb2NrcXVvdGVTaXplOiAyNCxcbiAgICAvLyBEZWZhdWx0IGFsaWdubWVudHNcbiAgICBwYXJhZ3JhcGhBbGlnbm1lbnQ6IFwiTEVGVFwiLFxuICAgIGhlYWRpbmcxQWxpZ25tZW50OiBcIkxFRlRcIixcbiAgICBoZWFkaW5nMkFsaWdubWVudDogXCJMRUZUXCIsXG4gICAgaGVhZGluZzNBbGlnbm1lbnQ6IFwiTEVGVFwiLFxuICAgIGhlYWRpbmc0QWxpZ25tZW50OiBcIkxFRlRcIixcbiAgICBoZWFkaW5nNUFsaWdubWVudDogXCJMRUZUXCIsXG4gICAgYmxvY2txdW90ZUFsaWdubWVudDogXCJMRUZUXCIsXG4gICAgaGVhZGluZ0FsaWdubWVudDogXCJMRUZUXCIsXG59O1xuZXhwb3J0IGNvbnN0IGhlYWRpbmdDb25maWdzID0ge1xuICAgIDE6IHsgbGV2ZWw6IDEsIHNpemU6IDAsIHN0eWxlOiBcIlRpdGxlXCIgfSxcbiAgICAyOiB7IGxldmVsOiAyLCBzaXplOiAwLCBzdHlsZTogXCJIZWFkaW5nMlwiIH0sXG4gICAgMzogeyBsZXZlbDogMywgc2l6ZTogMCB9LFxuICAgIDQ6IHsgbGV2ZWw6IDQsIHNpemU6IDAgfSxcbiAgICA1OiB7IGxldmVsOiA1LCBzaXplOiAwIH0sXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mohtasham/md-to-docx/dist/types.js\n");

/***/ })

};
;